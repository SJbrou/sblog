<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-20T14:07:49+01:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">How to university</title><link href="http://localhost:4000/VU/2024/11/19/How-to-University" rel="alternate" type="text/html" title="How to university" /><published>2024-11-19T00:00:00+01:00</published><updated>2024-11-19T00:00:00+01:00</updated><id>http://localhost:4000/VU/2024/11/19/How-to-University</id><content type="html" xml:base="http://localhost:4000/VU/2024/11/19/How-to-University"><![CDATA[<p>Guide to following multiple extra courses
<!--excerpt--></p>

<p>Switching fields between my bachelors’ and masters’ required me to take some extra courses. Following extra courses is free if you’re enrolled at the VU, and you can follow as many as you like (although you receive mental health warnings if you enroll &gt;3). 
Seeing how many intredting courses are offered, it might have gotten a bit out of hand as I’m following 9 courses concurrently. Here are the lessons I learned</p>

<p><img src="/assets/dts/planned_courses.png" alt="Planned Courses" style="width:70%; border-radius:10px; background-color:#f0f0f0; padding:0.6rem; display:block; margin:1rem auto;" /></p>

<h2 id="course-selection">Course selection</h2>

<p>Some planning beforehand is required. You need to identify what courses are available in what period, which is a pain using the VU site, download my scraped overview here. Select a couple of courses that seem intresting, and check if they overlap. At rooster.student.vu.nl you can include any course in your <em>“hypothetical”</em> schedule and check for conflicts (be sure to play arround with workgroup selection!). If your schedule fits, check for entry requirements. Although they seem obligatory, course coordinators are often happy to enroll you if you send them an enthausiastic email.</p>

<p>Then you need to determine what courses seem intresting/relevant, if they overlap, and fin</p>]]></content><author><name>Stan Brouwer</name></author><category term="VU" /><summary type="html"><![CDATA[Guide to following multiple extra courses]]></summary></entry><entry><title type="html">Misaligned incentives in university education</title><link href="http://localhost:4000/VU/2024/11/19/Misaligned-incentives-in-university-education" rel="alternate" type="text/html" title="Misaligned incentives in university education" /><published>2024-11-19T00:00:00+01:00</published><updated>2024-11-19T00:00:00+01:00</updated><id>http://localhost:4000/VU/2024/11/19/Misaligned-incentives-in-university-education</id><content type="html" xml:base="http://localhost:4000/VU/2024/11/19/Misaligned-incentives-in-university-education"><![CDATA[<p>Why Universities have no incentive to teach well
<!--excerpt--></p>

<p>Back in high school, I used to think that university would be educational paradise, thought by subject experts. And although I genuinly enjoy learning from my professors, I’ve been a bit disappointed by the differing teaching skills of my professors.</p>

<p>This is not the professors’ fault. After all, as students, we want to learn from experts at the cutting edge of their fields. However, we also want those experts to be great teachers. This is where the Dutch higher educational system has some misaligned incentives.</p>

<p>Take the VU for example. Professors are evaluated primarily on their research output. The quality and quantity of their research determine how much time they’re allocated for research, with teaching filling the rest of their contracted hours. Essentially, teaching becomes a mandatory nuisance—a task to complete rather than a priority.</p>

<p>Another issue is the lack of didactic training for university professors. While secondary school teachers go through rigorous teaching programs to develop classroom skills, the path to becoming a university lecturer is entirely academic.
https://nl.indeed.com/carrieregids/baan-vinden/hoe-word-je-hoogleraar
 While I admire the academic prowess of my professors, perhaps it’s time to rethink how much teaching preparation they receive.</p>

<p>Loosening some constraints on university teaching might also help. Many general introductory courses—like academic skills, statistics, or calculus—don’t necessarily require a world-renowned researchers. I’ve had the privilege of learning mathematics from a rare professor who had a full-time teaching role, and was nominated for best teacher. Prioritizing teaching quality can make a difference. Maybe not all courses need to be taught by field experts; instead, some could benefit from being led by expert teachers.</p>

<p>Finally, the feedback loop for teaching is completely broken. There was a time when students had to fill out paper evaluations directly after their exams, rating the course, the professor, and the exam itself. While this wasn’t perfect, the response rate was consistently above 90%. Now, with the online evaluation system evalytics, response rates have plummeted to under 8% —sometimes with fewer than five students providing feedback for an entire course. This shift to online has crippled feedback mechanisms for professors, but also for the oversight boards like the OLC, which are supposed to monitor educational quality.</p>

<p>Without proper feedback or external incentives, professors might do “just enough” to avoid being flagged by the broken system and continue their research. Luckily, many of my professors are intrisnsically motivated. However, relying on their goodwill is not sustainable. Hopefully we can align intrests and incentives, benifiting both the students and the educators.</p>]]></content><author><name>Stan Brouwer</name></author><category term="VU" /><summary type="html"><![CDATA[Why Universities have no incentive to teach well]]></summary></entry><entry><title type="html">HEIC to JPG while keeping metadata</title><link href="http://localhost:4000/projects/2024/11/16/HEIC-to-JPG-while-keeping-metadata" rel="alternate" type="text/html" title="HEIC to JPG while keeping metadata" /><published>2024-11-16T00:00:00+01:00</published><updated>2024-11-16T00:00:00+01:00</updated><id>http://localhost:4000/projects/2024/11/16/HEIC-to-JPG-while-keeping-metadata</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/16/HEIC-to-JPG-while-keeping-metadata"><![CDATA[<link rel="stylesheet" href="/assets/css/prism.css" />

<script src="/assets/js/prism.js"></script>

<p>Using python to export apple HEIC images to jpg with their original “created” date<br />
<!-- excerpt --></p>

<p>Relatives asked me to help with their photo backups.<br />
Their iPhone photos were in .HEIC format, which they couldn’t view. Exporting to jpg from the photos app overwrote the “Created” date and thus broke their sorting. (Maybe sort on “<em>Content Created</em>” date?).</p>

<p>After trying everything, they decided to ask the <em>“computer”</em> guy for help (me).</p>

<p>Luckily, photos have metadata, which we can manipulate in Python.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="n">pillow_heif</span>
<span class="kn">import</span> <span class="n">piexif</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">ExifTags</span>

<span class="n">pillow_heif</span><span class="p">.</span><span class="nf">register_heif_opener</span><span class="p">()</span>

<span class="c1"># Input and output directories
</span><span class="n">from_directory</span> <span class="o">=</span> <span class="sh">"</span><span class="s">from</span><span class="sh">"</span>
<span class="n">to_directory</span> <span class="o">=</span> <span class="sh">"</span><span class="s">to</span><span class="sh">"</span>

<span class="c1"># Ensure they exists
</span><span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">to_directory</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Function extract EXIF DateTime or ContentCreated
</span><span class="k">def</span> <span class="nf">extract_datetime_or_created</span><span class="p">(</span><span class="n">exif_data</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">exif_data</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">tag_id</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">exif_data</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">tag_name</span> <span class="o">=</span> <span class="n">ExifTags</span><span class="p">.</span><span class="n">TAGS</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">tag_id</span><span class="p">,</span> <span class="n">tag_id</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">tag_name</span> <span class="o">==</span> <span class="sh">'</span><span class="s">DateTime</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">value</span>
            <span class="k">if</span> <span class="n">tag_name</span> <span class="o">==</span> <span class="sh">'</span><span class="s">ContentCreated</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">value</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># Process all HEIC files in "from""
</span><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">from_directory</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">.heic</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">heic_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">from_directory</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">heic_file_path</span><span class="p">)</span>
            <span class="n">exif_data</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="nf">getexif</span><span class="p">()</span> <span class="c1"># Extract EXIF, use DateTime/ContentCreated
</span>            <span class="n">content_created_str</span> <span class="o">=</span> <span class="nf">extract_datetime_or_created</span><span class="p">(</span><span class="n">exif_data</span><span class="p">)</span>
            <span class="n">jpeg_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">to_directory</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">splitext</span><span class="p">(</span><span class="n">filename</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">.jpg</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># Convert to JPEG
</span>            <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">content_created_str</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">content_created_datetime</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">strptime</span><span class="p">(</span><span class="n">content_created_str</span><span class="p">,</span> <span class="sh">"</span><span class="s">%Y:%m:%d %H:%M:%S</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">exif_timestamp</span> <span class="o">=</span> <span class="n">content_created_datetime</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y:%m:%d %H:%M:%S</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                    <span class="n">exif_timestamp</span> <span class="o">=</span> <span class="n">content_created_str</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">exif_timestamp</span> <span class="o">=</span> <span class="bp">None</span>

            <span class="c1"># If valid ContentCreated/DateTime, overwrite EXIF
</span>            <span class="n">exif_dict</span> <span class="o">=</span> <span class="n">piexif</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">exif</span><span class="sh">"</span><span class="p">,</span> <span class="sa">b</span><span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">exif_timestamp</span><span class="p">:</span>
                <span class="c1"># Set DateTime (EXIF tag 0x9003 (DateTimeOriginal))
</span>                <span class="n">exif_dict</span><span class="p">[</span><span class="sh">'</span><span class="s">0th</span><span class="sh">'</span><span class="p">][</span><span class="n">piexif</span><span class="p">.</span><span class="n">ImageIFD</span><span class="p">.</span><span class="n">DateTime</span><span class="p">]</span> <span class="o">=</span> <span class="n">exif_timestamp</span>
                <span class="n">exif_dict</span><span class="p">[</span><span class="sh">'</span><span class="s">Exif</span><span class="sh">'</span><span class="p">][</span><span class="n">piexif</span><span class="p">.</span><span class="n">ExifIFD</span><span class="p">.</span><span class="n">DateTimeOriginal</span><span class="p">]</span> <span class="o">=</span> <span class="n">exif_timestamp</span>  <span class="c1"># Set DateTimeOriginal tag
</span>
            <span class="c1"># Convert EXIF dict to bytes
</span>            <span class="n">exif_bytes</span> <span class="o">=</span> <span class="n">piexif</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">exif_dict</span><span class="p">)</span>

            <span class="c1"># Save as JPEG
</span>            <span class="n">img</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">jpeg_file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">JPEG</span><span class="sh">"</span><span class="p">,</span> <span class="n">exif</span><span class="o">=</span><span class="n">exif_bytes</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">optimize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Converted: </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s"> to </span><span class="si">{</span><span class="n">jpeg_file_path</span><span class="si">}</span><span class="s"> (ContentCreated: </span><span class="si">{</span><span class="n">exif_timestamp</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

            
            <span class="k">if</span> <span class="n">content_created_str</span><span class="p">:</span>
                <span class="n">file_timestamp</span> <span class="o">=</span> <span class="n">content_created_datetime</span><span class="p">.</span><span class="nf">timestamp</span><span class="p">()</span>

                <span class="c1"># Edit os creation and modification times
</span>                <span class="n">os</span><span class="p">.</span><span class="nf">utime</span><span class="p">(</span><span class="n">jpeg_file_path</span><span class="p">,</span> <span class="p">(</span><span class="n">file_timestamp</span><span class="p">,</span> <span class="n">file_timestamp</span><span class="p">))</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Updated timestamps for </span><span class="si">{</span><span class="n">jpeg_file_path</span><span class="si">}</span><span class="s"> (Created/Modified: </span><span class="si">{</span><span class="n">exif_timestamp</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to process </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>


<span class="sh">"""</span><span class="s">

# Some code to inspect the metadata of HEIC files
from PIL import Image
import pillow_heif
from PIL import ExifTags

# Register HEIC support in Pillow
pillow_heif.register_heif_opener()

# Open the HEIC image file
heic_file_path = </span><span class="sh">"</span><span class="s">path/file.HEIC</span><span class="sh">"</span><span class="s">
img = Image.open(heic_file_path)

# Show the image using the default viewer (Preview on macOS)
img.show()

# Extract EXIF data
exif_data = img.getexif()

if exif_data:
    print(</span><span class="sh">"</span><span class="se">\n</span><span class="s">EXIF Data:</span><span class="sh">"</span><span class="s">)
    for tag_id, value in exif_data.items():
        tag_name = ExifTags.TAGS.get(tag_id, tag_id)  # Get the tag name from the ExifTags dictionary
        print(f</span><span class="sh">"</span><span class="s">{tag_name}: {value}</span><span class="sh">"</span><span class="s">)
else:
    print(</span><span class="sh">"</span><span class="s">No EXIF data found.</span><span class="sh">"</span><span class="s">)
</span><span class="sh">"""</span>

</code></pre></div></div>

<p>Luckily, this worked and I could export all HEIC photo’s to JPG with both the “created”, “modified” and “date created” tag set to the origional “date created” tag.</p>]]></content><author><name>Stan Brouwer</name></author><category term="projects" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Scraping the VU site</title><link href="http://localhost:4000/projects/2024/11/13/scraping-the-VU-site" rel="alternate" type="text/html" title="Scraping the VU site" /><published>2024-11-13T00:00:00+01:00</published><updated>2024-11-13T00:00:00+01:00</updated><id>http://localhost:4000/projects/2024/11/13/scraping-the-VU-site</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/13/scraping-the-VU-site"><![CDATA[<link rel="stylesheet" href="/assets/css/prism.css" />

<script src="/assets/js/prism.js"></script>

<p>Finding course info on the VU page is a pain. lets scrape all active courses from their site and create a querriable database using R!
<!-- excerpt --></p>

<p>As I like to follow extracurricular courses, I have to check what courses are available during what semester (period). However, the VU site provides no suchs availability. Lets create it ourselves by scraping all active courses from the VU site, and combining the data in a csv file which we <em>can</em> query.</p>

<p><img src="/assets/content/scraping_the_vu_site/vu_site.png" alt="Why is querying the period impossible?!" style="width:100%; border-radius:10px; background-color:#f0f0f0; padding:0.6rem; display:block; margin:1rem auto;" /></p>

<p>Follow the links to the 
<a href="https://github.com/SJbrou/scraping-vu">github</a>, <a href="asd">code page</a> and <a href="https://github.com/SJbrou/scraping-vu/blob/main/scraped_courses.csv">final results .csv</a></p>

<p>The code and explanation follow</p>

<p>While browsing the VU website, I found their “Studiegids” to be a pain.<br />
I wanted to apply for some extra courses, and sorting them on semester/period or required prior knowledge was impossible.<br />
Thus, it seemed a perfect opportunity to practice some web-scraping skills.</p>

<p>The <a href="https://research.vu.nl/en/courses/?year=2024&amp;ordering=title&amp;descending=false&amp;format=rss&amp;page=">VU website</a> only shows 50 pages of 50 results, while there are ~3500 different courses. Lets querry them orderd on title both ascendingly and descendingly, and find all unique urls.</p>

<p>Lets start by cleaning the worksapce and loading required dependencies</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># a nice function to clear the worksapce and install + load required packages</span><span class="w">

</span><span class="c1"># Clear workspace</span><span class="w">
</span><span class="n">rm</span><span class="p">(</span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ls</span><span class="p">())</span><span class="w">


</span><span class="c1"># Function to load packages, and install them if necessary.</span><span class="w">
</span><span class="n">install_and_load</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">packages</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">installed_packages</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">installed.packages</span><span class="p">())</span><span class="w">                                </span><span class="c1"># Check installed packages</span><span class="w">
  </span><span class="n">to_install</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">packages</span><span class="p">[</span><span class="o">!</span><span class="p">(</span><span class="n">packages</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">installed_packages</span><span class="p">)]</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">to_install</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                                                       </span><span class="c1"># Install missing</span><span class="w">
    </span><span class="n">install.packages</span><span class="p">(</span><span class="n">to_install</span><span class="p">,</span><span class="w"> </span><span class="n">dependencies</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">suppressMessages</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="n">packages</span><span class="p">,</span><span class="w"> </span><span class="n">require</span><span class="p">,</span><span class="w"> </span><span class="n">character.only</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">quietly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">))</span><span class="w">  </span><span class="c1"># Load</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">install_and_load</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"xml2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"rvest"</span><span class="p">,</span><span class="w"> </span><span class="s2">"dplyr"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Lets scrape all URL’s linking to course pages from the search page. As only 2500 out of ~3600 pages are returend, we have to request all courses both ascendingly and descendingly. We can filter for duplacates later.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Initialize base URLs and page numbers</span><span class="w">
</span><span class="n">asc_url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://research.vu.nl/en/courses/?year=2024&amp;ordering=title&amp;descending=false&amp;format=rss&amp;page="</span><span class="w">
</span><span class="n">desc_url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://research.vu.nl/en/courses/?year=2024&amp;ordering=title&amp;descending=true&amp;format=rss&amp;page="</span><span class="w">
</span><span class="n">url_incr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">49</span><span class="w">  </span><span class="c1"># Assuming pagination goes from page 0 to 49</span><span class="w">

</span><span class="c1"># Define a function to fetch links from RSS feed pages</span><span class="w">
</span><span class="n">fetch_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span><span class="w"> </span><span class="n">url_incr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  

  </span><span class="n">links_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
  </span><span class="c1"># Loop through each page</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">url_incr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="c1"># Construct the full URL for the current page</span><span class="w">
    </span><span class="n">url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Read the RSS feed XML content</span><span class="w">
    </span><span class="n">rss_content</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_xml</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Extract all &lt;link&gt; elements</span><span class="w">
    </span><span class="n">links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xml_find_all</span><span class="p">(</span><span class="n">rss_content</span><span class="p">,</span><span class="w"> </span><span class="s2">".//link"</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># exclude first link</span><span class="w">
    </span><span class="n">link_texts</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xml_text</span><span class="p">(</span><span class="n">links</span><span class="p">[</span><span class="m">-1</span><span class="p">])</span><span class="w">
    
    </span><span class="c1"># Here all new links are appended. Could optimize by initializing length first. but at 3k entries this shouldn't be an issue. I'm just lazy here</span><span class="w">
    </span><span class="n">links_list</span><span class="p">[[</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">link_texts</span><span class="w">
    
    </span><span class="c1"># A small delay to avoid overloading the server. Was expecting to be rate limited but 0.1 seemed just fine</span><span class="w">
    </span><span class="n">Sys.sleep</span><span class="p">(</span><span class="m">0.1</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  
  </span><span class="c1"># Return the combined list of links</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">links_list</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">


</span><span class="n">asc_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fetch_links</span><span class="p">(</span><span class="n">asc_url</span><span class="p">,</span><span class="w"> </span><span class="n">url_incr</span><span class="p">)</span><span class="w">
</span><span class="n">desc_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fetch_links</span><span class="p">(</span><span class="n">desc_url</span><span class="p">,</span><span class="w"> </span><span class="n">url_incr</span><span class="p">)</span><span class="w">

</span><span class="c1"># Filter for duplicates and show some results</span><span class="w">
</span><span class="n">all_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">asc_links</span><span class="p">,</span><span class="w"> </span><span class="n">desc_links</span><span class="p">))</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">all_links</span><span class="p">)</span><span class="w">




</span><span class="c1"># Some code to save and load all links as RDS data so the VU site only had to be scraped once.</span><span class="w">

</span><span class="c1"># save all_links to an file</span><span class="w">
</span><span class="c1"># saveRDS(all_links, "all_links.RDS")</span><span class="w">

</span></code></pre></div></div>

<p>These url’s all lead to research.vu.nl pages that contain many different links. We are only interested in links containing “studiegids”. lets loop through all pages and store all links containing “studielink” and thus lead to the information page.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">studiegids_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="s2">"character"</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3575</span><span class="p">)</span><span class="w">
</span><span class="n">counter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">


</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">url</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">all_links</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  
  </span><span class="n">tryCatch</span><span class="p">({</span><span class="w">
    </span><span class="c1"># Read HTML of reasearch.vu</span><span class="w">
    </span><span class="n">html_content</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Look for node with link to studiegids</span><span class="w">
    </span><span class="n">studiegids_nodes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">html_nodes</span><span class="p">(</span><span class="n">html_content</span><span class="p">,</span><span class="w"> </span><span class="n">xpath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"//h2[@class='subheader' and text()='URL study guide']/following-sibling::a[1]"</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Extract href</span><span class="w">
    </span><span class="n">href_values</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">html_attr</span><span class="p">(</span><span class="n">studiegids_nodes</span><span class="p">,</span><span class="w"> </span><span class="s2">"href"</span><span class="p">)</span><span class="w">
    </span><span class="n">studiegids_links</span><span class="p">[[</span><span class="n">counter</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">href_values</span><span class="w">
    
    </span><span class="c1"># Print progress every 10 iterations</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">counter</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="m">10</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">cat</span><span class="p">(</span><span class="s2">"Processed"</span><span class="p">,</span><span class="w"> </span><span class="n">counter</span><span class="p">,</span><span class="w"> </span><span class="s2">"out of"</span><span class="p">,</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">all_links</span><span class="p">),</span><span class="w"> </span><span class="s2">"URLs\n"</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
    </span><span class="c1"># Increment the counter only if tryCatch was successful</span><span class="w">
    </span><span class="n">counter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">
  </span><span class="p">},</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c1"># error message</span><span class="w">
    </span><span class="n">message</span><span class="p">(</span><span class="s2">"Error in URL: "</span><span class="p">,</span><span class="w"> </span><span class="n">url</span><span class="p">)</span><span class="w">
  </span><span class="p">})</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">studiegids_links</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">studiegids_links</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">studiegids_links</span><span class="p">)</span><span class="w">


</span><span class="c1"># Some code to save and load all links as RDS data so the VU site only had to be scraped once.</span><span class="w">

</span><span class="c1"># Save studiegids_links to an R file</span><span class="w">
</span><span class="c1"># saveRDS(studiegids_links, "studiegids_links.RDS")   # saving results in between here. </span><span class="w">

</span></code></pre></div></div>

<p>Each of the links in the list “studiegids_links” links to a webpage with the info we want to scrape. I’d like to scrape the following data into a dataframe:</p>

<p>The course title as in:
&lt;div id=”title”&gt;
&lt;h2&gt;Academic Skills Literature and Society 2&lt;/h2&gt;</p>

<p>from the &lt;div class=”course-data”&gt;</p>
<ul>
  <li>from the table the values of the &lt;td&gt; under the following &lt;th&gt;’s (each in a separate column)
    <ul>
      <li>“Course Code”</li>
      <li>“Credits”</li>
      <li>“Period”</li>
      <li>“Course Level”</li>
      <li>“Faculty”</li>
      <li>“Course Coordinator”</li>
      <li>“Examiner”</li>
      <li>“Teaching staff”</li>
    </ul>
  </li>
</ul>

<p>There also is a &lt;div class=”h3 course-data-header”&gt;Target audiences&lt;/div&gt;. I would like all the text values of the href’s that are child elements of it. Store them into one column.</p>

<p>If there exists an &lt;h3&gt;Entry Requirements&lt;/h3&gt; I would like the text value of its child element (&lt;p&gt;)
If there exists an &lt;h3&gt;Course Content&lt;/h3&gt; I would like the text value of its child element (&lt;p&gt;)</p>

<p>Finally, also store the link used to access it in the dataframe.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Number of pages to scrape</span><span class="w">
</span><span class="n">num_pages</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">3526</span><span class="w"> </span><span class="c1"># might change. In hindsight I should have called length() to determine this</span><span class="w">

</span><span class="c1"># Initialize an empty dataframe of 3526 rows x 13 columns. This time I wasn't lazy :)</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
  </span><span class="n">Title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Course_code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Credits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Period</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Course_Level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Faculty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Course_Coordinator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Examiner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Teaching_Staff</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Target_Audiences</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Entry_Requirements</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">Course_Content</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">URL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">num_pages</span><span class="p">),</span><span class="w">
  </span><span class="n">stringsAsFactors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># Global counter for progress</span><span class="w">
</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">  </span><span class="c1"># Start from the first row</span><span class="w">

</span><span class="c1"># Define a function to scrape data from a single URL and fill the dataframe row by row</span><span class="w">
</span><span class="n">scrape_course_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">tryCatch</span><span class="p">({</span><span class="w">
    </span><span class="c1"># Read the HTML content of the page</span><span class="w">
    </span><span class="n">page</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Course title</span><span class="w">
    </span><span class="n">course_title</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_node</span><span class="p">(</span><span class="s2">"#title h2"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_text</span><span class="p">(</span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
    
    </span><span class="c1"># Course data table (if it exists)</span><span class="w">
    </span><span class="n">course_data_node</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_node</span><span class="p">(</span><span class="s2">".course-data"</span><span class="p">)</span><span class="w">

    </span><span class="c1"># If the course data table exists, extract it as a data frame</span><span class="w">
    </span><span class="n">course_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">course_data_node</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">html_table</span><span class="p">(</span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

    </span><span class="c1"># Extract details from course data table</span><span class="w">
    </span><span class="n">course_code</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">credits</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">period</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">course_level</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">faculty</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">course_coordinator</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">examiner</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">
    </span><span class="n">teaching_staff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">course_data</span><span class="p">[</span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">])</span><span class="w">

    </span><span class="c1"># Extract Target Audiences under &lt;div class="h3 course-data-header"&gt;Target audiences&lt;/div&gt;</span><span class="w">
    </span><span class="n">target_audiences</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_node</span><span class="p">(</span><span class="n">xpath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"//div[@class='h3 course-data-header' and contains(text(), 'Target audiences')]/following-sibling::div"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"a"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_text</span><span class="p">(</span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">paste</span><span class="p">(</span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">", "</span><span class="p">)</span><span class="w">  </span><span class="c1"># Combine into a single string</span><span class="w">

    </span><span class="c1"># Extract Entry Requirements text, if it exists</span><span class="w">
    </span><span class="n">entry_requirements</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_node</span><span class="p">(</span><span class="n">xpath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"//h3[contains(text(), 'Entry Requirements')]/following-sibling::p"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_text</span><span class="p">(</span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="p">{</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">is.null</span><span class="p">(</span><span class="n">.</span><span class="p">))</span><span class="w"> </span><span class="kc">NA</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="n">.</span><span class="p">}</span><span class="w">

    </span><span class="c1"># Extract Course Content text, if it exists</span><span class="w">
    </span><span class="n">course_content</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_node</span><span class="p">(</span><span class="n">xpath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"//h3[contains(text(), 'Course Content')]/following-sibling::p"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">html_text</span><span class="p">(</span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="p">{</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">is.null</span><span class="p">(</span><span class="n">.</span><span class="p">))</span><span class="w"> </span><span class="kc">NA</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="n">.</span><span class="p">}</span><span class="w">

    </span><span class="c1"># Increment counter and show progress</span><span class="w">
    </span><span class="n">cat</span><span class="p">(</span><span class="s2">"Scraped page"</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="s2">":"</span><span class="p">,</span><span class="w"> </span><span class="n">url</span><span class="p">,</span><span class="w"> </span><span class="s2">"\n"</span><span class="p">)</span><span class="w">

    </span><span class="c1"># fill dataframe with scraped data</span><span class="w">
    </span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">course_title</span><span class="p">,</span><span class="w"> </span><span class="n">course_code</span><span class="p">,</span><span class="w"> </span><span class="n">credits</span><span class="p">,</span><span class="w"> </span><span class="n">period</span><span class="p">,</span><span class="w"> </span><span class="n">course_level</span><span class="p">,</span><span class="w"> </span><span class="n">faculty</span><span class="p">,</span><span class="w"> 
                    </span><span class="n">course_coordinator</span><span class="p">,</span><span class="w"> </span><span class="n">examiner</span><span class="p">,</span><span class="w"> </span><span class="n">teaching_staff</span><span class="p">,</span><span class="w"> </span><span class="n">target_audiences</span><span class="p">,</span><span class="w"> 
                    </span><span class="n">entry_requirements</span><span class="p">,</span><span class="w"> </span><span class="n">course_content</span><span class="p">,</span><span class="w"> </span><span class="n">url</span><span class="p">)</span><span class="w">
    
    </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">

  </span><span class="p">},</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c1"># error handling</span><span class="w">
    </span><span class="n">cat</span><span class="p">(</span><span class="s2">"Error scraping"</span><span class="p">,</span><span class="w"> </span><span class="n">url</span><span class="p">,</span><span class="w"> </span><span class="s2">"\n"</span><span class="p">)</span><span class="w">
  </span><span class="p">})</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1"># Now run for each url we gathered</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">url</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">studiegids_links</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">scrape_course_data</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1"># Final dataframe!</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w">
</span><span class="n">write.csv</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="s2">"VU_courses"</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Tada! now we can query the courses as intended!</p>]]></content><author><name>Stan Brouwer</name></author><category term="projects" /><category term="VU" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Nudges in the Nudge course</title><link href="http://localhost:4000/VU/2024/10/30/Nudges-in-the-nudge-course" rel="alternate" type="text/html" title="Nudges in the Nudge course" /><published>2024-10-30T00:00:00+01:00</published><updated>2024-10-30T00:00:00+01:00</updated><id>http://localhost:4000/VU/2024/10/30/Nudges-in-the-nudge-course</id><content type="html" xml:base="http://localhost:4000/VU/2024/10/30/Nudges-in-the-nudge-course"><![CDATA[<p>Essay: Practicing what you preach: Nudges in the Nudge course.
best educational design practices in higher education
<!--excerpt --></p>

<p><br /></p>

<ul>
  <li>Could you do me a favour and please give me an hypothesis:</li>
</ul>

<p>During “Nudge: Influencing Behaviour” I was so impressed by the dedactic and pedagogic level that it bleaked my experience of other courses. 
I was impressed by the high  pedagogic and dedactic level of the “Nudge: Influencing Behaviour” course. So much so that it bleaked performances of my other lecturers. Lets dive into the best practices deployed throughout the course</p>

<h2 id="context---what-is-nudgeing">Context - what is nudgeing</h2>
<p>Thaler and Sunstein defined their concept as the <a href="https://en.wikipedia.org/wiki/Nudge_theory#Definition">following</a>:
<cite>
“A nudge, as we will use the term, is any aspect of the choice architecture that alters people’s behavior in a predictable way without forbidding any options or significantly changing their economic incentives. To count as a mere nudge, the intervention must be easy and cheap to avoid. Nudges are not mandates. Putting fruit at eye level counts as a nudge. Banning junk food does not”.</cite></p>

<h2 id="stetting-a-course-up-for-succes">Stetting a course up for succes!</h2>

<h2 id="personal-experience">Personal experience</h2>

<h2 id="didact-devices">Didact devices</h2>]]></content><author><name>Stan Brouwer</name></author><category term="VU" /><summary type="html"><![CDATA[Essay: Practicing what you preach: Nudges in the Nudge course. best educational design practices in higher education]]></summary></entry><entry><title type="html">Site todo</title><link href="http://localhost:4000/projects/2024/10/28/Site-todo" rel="alternate" type="text/html" title="Site todo" /><published>2024-10-28T00:00:00+01:00</published><updated>2024-10-28T00:00:00+01:00</updated><id>http://localhost:4000/projects/2024/10/28/Site-todo</id><content type="html" xml:base="http://localhost:4000/projects/2024/10/28/Site-todo"><![CDATA[<p>Development wishlist
<!--excerpt--></p>

<style>
li {
  display: flex;
  justify-content: space-between;
}
.changelog_date {
  margin-left: auto;
  text-align: right;
  font-family: Menlo, Monaco, "Courier New", monospace; /* Technical font */
  font-size: 0.9em; /* Slightly smaller font size, about 1px smaller */
}

</style>

<h3 id="todo">Todo</h3>
<ul>
  <li>Include report bug option</li>
  <li>Include “respond” options</li>
  <li>Improve post categorization / add tags-code</li>
</ul>

<h3 id="changelog">Changelog</h3>

<ul>
  <li>Implemented simple post categorization <span class="changelog_date">01-11-2024</span></li>
  <li>Started writing Essay on Nudge <span class="changelog_date">31-10-2024</span></li>
  <li>Started site development <span class="changelog_date">30-10-2024</span></li>
  <li>Learned about Jekyll <span class="changelog_date">30-10-2024</span></li>
</ul>]]></content><author><name>Stan Brouwer</name></author><category term="projects" /><summary type="html"><![CDATA[Development wishlist]]></summary></entry><entry><title type="html">DTS Portfolio introduction</title><link href="http://localhost:4000/vu/2024/10/23/DTS-portfolio" rel="alternate" type="text/html" title="DTS Portfolio introduction" /><published>2024-10-23T00:00:00+02:00</published><updated>2024-10-23T00:00:00+02:00</updated><id>http://localhost:4000/vu/2024/10/23/DTS-portfolio</id><content type="html" xml:base="http://localhost:4000/vu/2024/10/23/DTS-portfolio"><![CDATA[<p>Introduction to the DTS portfolio assignment
<!--excerpt --></p>

<p><br /></p>

<p>To reflect and order thoughts concerning the themes of digitalization and sustainability throughout the curriculum, students were asked to deliver a short write-up concerning these themes for each of the followed courses in the master.</p>

<h2 id="official-requirements">Official requirements:</h2>

<ul>
  <li>Reflection of at least 300 words <em>on each course</em> that is followed by a student</li>
  <li>Reflection section concerning the master thesis project</li>
  <li>Think out of the box, be creative</li>
</ul>

<h2 id="probing-questions">Probing questions</h2>

<ul>
  <li><a href="/assets/dts/Probing%20Questions.xlsx">Probing Questions.xlsx</a> / <a href="https://docs.google.com/spreadsheets/d/1XTrINVtwatpxhZITsJLs-Va559pbC-BhX6Oak15eCgk/edit?pli=1&amp;gid=0#gid=0">google sheet</a></li>
  <li>To what extent did you reach the objectives of this course? (see course manuals!)</li>
</ul>

<p><br />
Unfortunately, this is going to be quite a pain:</p>

<p><img src="/assets/dts/planned_courses.png" alt="Planned Courses" style="width:70%; border-radius:10px; background-color:#f0f0f0; padding:0.6rem; display:block; margin:1rem auto;" />
<!-- https://heather-buchel.com/blog/2024/03/letters-to-an-accessibility-advocate/ --></p>]]></content><author><name>Stan Brouwer</name></author><category term="VU" /><summary type="html"><![CDATA[Introduction to the DTS portfolio assignment]]></summary></entry><entry><title type="html">Followed courses</title><link href="http://localhost:4000/VU/2024/10/22/Followed-courses" rel="alternate" type="text/html" title="Followed courses" /><published>2024-10-22T00:00:00+02:00</published><updated>2024-10-22T00:00:00+02:00</updated><id>http://localhost:4000/VU/2024/10/22/Followed-courses</id><content type="html" xml:base="http://localhost:4000/VU/2024/10/22/Followed-courses"><![CDATA[<p>List of courses I followed at Vrije Universiteit Amsterdam.<br />
<!--excerpt--></p>

<style>
li {
  display: flex;
  justify-content: space-between;
}
.course-code {
  margin-left: auto;
  text-align: right;
  font-family: Menlo, Monaco, "Courier New", monospace; /* Technical font */
  font-size: 0.9em; /* Slightly smaller font size, about 1px smaller */
}

</style>

<p>Each course corresponds to 6 <a href="https://education.ec.europa.eu/education-levels/higher-education/inclusive-and-connected-higher-education/european-credit-transfer-and-accumulation-system">ECTS</a>. A full year of university education is equal to 60 <a href="https://education.ec.europa.eu/education-levels/higher-education/inclusive-and-connected-higher-education/european-credit-transfer-and-accumulation-system">ECTS</a>.</p>

<p>Last updated: 31-10-2024</p>

<h3 id="master-information-science">Master Information Science</h3>
<ul>
  <li>Nudge: influencing Behavior <span class="course-code">(E_MFDM_NIB)</span></li>
  <li>Supply Chain Data Analytics <span class="course-code">(E_TSCM_SCDA)</span></li>
  <li>Data Analytics for Accounting and Control <span class="course-code">(E_ACC_DAAC)</span></li>
  <li>Network Analysis <span class="course-code">(E_TSCM_NA)</span></li>
  <li>Networks and Graphs <span class="course-code">(X_401010)</span></li>
  <li>Statistics with R <span class="course-code">(X_418156)</span></li>
  <li>Information Retrieval <span class="course-code">(X_40035)</span></li>
  <li>Logistics Analysis <span class="course-code">(X_401084)</span></li>
  <li>Managing Negotiations: Getting to Yes <span class="course-code">(E_MFDM_MNGY)</span></li>
  <li>The Social Web <span class="course-code">(X_405086)</span></li>
  <li>Digital Architecture <span class="course-code">(XM_0127)</span></li>
  <li>Economic Challenges for Minor Students <span class="course-code">(E_MUE_ECMS)</span></li>
  <li>An Introduction to Economics <span class="course-code">(E_MUE_AIE)</span></li>
  <li>Advanced Programming <span class="course-code">(X_400561)</span></li>
  <li>Digitalization and Sustainability <span class="course-code">(XM_0089)</span></li>
  <li>Knowledge Organization <span class="course-code">(X_405065)</span></li>
</ul>

<h3 id="bachelor-human-movement-sciences">Bachelor Human Movement Sciences</h3>
<ul>
  <li>Bachelor Research Project <span class="course-code">(Thesis, 24 ECTS)(B_BOP)</span></li>
  <li>Anatomy of the Motor System <span class="course-code">(B_ANATBEW)</span></li>
  <li>History and Philosophy of Movement Sciences <span class="course-code">(B_WETGSFIL)</span></li>
  <li>Neuropsychology and Rehabilitation Psychology <span class="course-code">(B_NEURREVPSY)</span></li>
  <li>Applied Exercise Physiology <span class="course-code">(B_TIF)</span></li>
  <li>Sensorimotor Coordination <span class="course-code">(B_SENSOCOR)</span></li>
  <li>Mechanical Analysis <span class="course-code">(B_MECHAN)</span></li>
  <li>Research Methods/Epidemiology <span class="course-code">(B_OZMEPIDEM)</span></li>
  <li>Movement and Health at Work <span class="course-code">(B_BWGZWERK)</span></li>
  <li>Neurosciences <span class="course-code">(B_NEURO)</span></li>
  <li>Rehabilitation <span class="course-code">(B_REVAL)</span></li>
  <li>Motorisch Leren en Ontwikkelen <span class="course-code">(B_MOTORLEREN)</span></li>
  <li>Muscle Physiology <span class="course-code">(B_SPIERFYS)</span></li>
  <li>Exercise Training and Performance <span class="course-code">(B_TRAINING)</span></li>
  <li>Introduction to Movement and Health <span class="course-code">(B_BWGZ)</span></li>
  <li>Statistics <span class="course-code">(B_STAT)</span></li>
  <li>Pathology of Movement <span class="course-code">(B_PATHOLOGIE)</span></li>
  <li>Clinical Movement Analysis <span class="course-code">(B_CLINMOVEAN)</span></li>
  <li>Philosophy of the Human Movement Sciences <span class="course-code">(B_FIL2)</span></li>
  <li>Measurement of Physical Quantities <span class="course-code">(B_METENVANFG)</span></li>
  <li>Introduction to Exercise Physiology <span class="course-code">(B_IF)</span></li>
  <li>Mathematics <span class="course-code">(B_WIS)</span></li>
  <li>Academic Exploration <span class="course-code">(B_ACVERK)</span></li>
  <li>Digital Signal Processing <span class="course-code">(B_VWDS)</span></li>
  <li>Biomechanics <span class="course-code">(B_BM)</span></li>
  <li>
    <p>Functional Anatomy <span class="course-code">(B_INLANAT)</span></p>
  </li>
  <li>Web Technology <span class="course-code">(X_400488)</span></li>
  <li>Big Data Tools <span class="course-code">(AB_1259)</span></li>
  <li>Databases <span class="course-code">(X_401008)</span></li>
  <li>Software Engineering Processes <span class="course-code">(XB_0089)</span></li>
</ul>]]></content><author><name>Stan Brouwer</name></author><category term="VU" /><summary type="html"><![CDATA[List of courses I followed at Vrije Universiteit Amsterdam.]]></summary></entry><entry><title type="html">Hello world</title><link href="http://localhost:4000/2024/10/20/hello-world" rel="alternate" type="text/html" title="Hello world" /><published>2024-10-20T00:00:00+02:00</published><updated>2024-10-20T00:00:00+02:00</updated><id>http://localhost:4000/2024/10/20/hello-world</id><content type="html" xml:base="http://localhost:4000/2024/10/20/hello-world"><![CDATA[<p>Wow! my first blog entry!</p>]]></content><author><name>Stan Brouwer</name></author><summary type="html"><![CDATA[Wow! my first blog entry!]]></summary></entry></feed>